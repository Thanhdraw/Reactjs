#Chương-1: Intro 
#Chương-2: Basic 
#Chương-3: Hooks-States



#Quan-trọng Dưới đây là một số kiến thức quan trọng trong ReactJS mà nên nắm vững:

Component và Props: Hiểu rõ về khái niệm component và cách sử dụng props để truyền dữ liệu từ component cha sang con.

State và Lifecycle: Hiểu về cách quản lý trạng thái của component và các giai đoạn của vòng đời (lifecycle) của một component.

Event Handling: Biết cách xử lý sự kiện trong React, ví dụ như khi người dùng click vào một nút.

Conditional Rendering: Nắm vững cách điều kiện hiển thị các phần tử trong JSX bằng các biểu thức điều kiện.

Lists and Keys: Hiểu về cách sử dụng danh sách và keys để hiệu quả trong React.

Forms: Biết cách làm việc với các trường form và quản lý trạng thái của chúng.

Lifting State Up: Hiểu cách chia sẻ trạng thái giữa các component cùng cấp hoặc các component cha con.

Component Lifecycle Methods: Biết về các phương thức lifecycle của component như componentDidMount, componentDidUpdate, componentWillUnmount, v.v.

Hooks (useState, useEffect, v.v.): Hiểu rõ cách sử dụng hooks để quản lý trạng thái và side effects trong functional components.

Router: Nếu ứng dụng của bạn sử dụng định tuyến (routing), thì nên nắm vững cách sử dụng React Router.

Context API: Nếu bạn đang xây dựng ứng dụng lớn hoặc ứng dụng với nhiều component chia sẻ trạng thái, thì nên nắm vững Context API.

Lifecycle Methods (for Class Components): Hiểu rõ về các phương thức lifecycle của class component, dù đã cũ, nhưng vẫn còn được sử dụng.

Higher Order Components (HOCs): Hiểu cách sử dụng HOCs để tái sử dụng logic trong các component khác nhau.

Error Handling: Biết cách xử lý lỗi trong React, ví dụ như sử dụng componentDidCatch để bắt lỗi trong component.

Forms and Controlled Components: Nắm vững cách quản lý các trường form và component điều khiển (controlled components).



Đây là một số React Hooks thường được sử dụng:

useState: #Quản lý state đơn giản
useEffect: #Thực hiện side effects (gọi API, subscriptions, DOM mutations, etc)
useContext: #Truy cập context từ bên trong component
useReducer: #Tạo callback không thay đổi giữa các lần render
useMemo: #Tránh tính toán lại giá trị nếu deps không thay đổi
useRef: #Truy cập đến DOM elements hoặc lưu trữ giá trị mutable
useImperativeHandle: #Customize giá trị trả về từ useRef khi sử dụng ref
useLayoutEffect: #Giống useEffect nhưng được thực thi đồng bộ
useDebugValue: #Hiển thị label cho custom hook trong React DevTools
=>Đây là những hooks thiết yếu, giúp xây dựng các ứng dụng React một cách hiệu quả và đúng chuẩn mực. Bạn nên tìm hiểu kĩ cách dùng chúng.